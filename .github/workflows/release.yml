name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: make test
    
    - name: Vet code
      run: make vet
    
    - name: Format check
      run: |
        make fmt
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code is not formatted. Please run 'make fmt'"
          exit 1
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git describe
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Build all platforms
      run: make build-all
    
    - name: Create checksums
      run: make release
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "## Changes" > CHANGELOG.md
          echo "- See commit history for detailed changes" >> CHANGELOG.md
        fi
        
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Read changelog or create basic one
        if [ -f CHANGELOG.md ]; then
          cat CHANGELOG.md > release_notes.txt
        else
          echo "## $VERSION" > release_notes.txt
          echo "" >> release_notes.txt
          echo "### Features" >> release_notes.txt
          echo "- Simple terminal interface for X.com posting" >> release_notes.txt
          echo "- Image paste support with Ctrl+V" >> release_notes.txt
          echo "- Line breaks with Alt+Enter or Ctrl+J" >> release_notes.txt
          echo "- Encrypted credential storage" >> release_notes.txt
          echo "- Cross-platform support (macOS, Linux, Windows)" >> release_notes.txt
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.changelog.outputs.version }}
        body_path: release_notes.txt
        files: |
          dist/xeet-*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update latest tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -f latest
        git push -f origin latest